package io.opentelemetry.javaagent.instrumentation.spark.v3;

import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Iterator;

public class ContainerId {
  public static final long CONTAINER_ID_BITMASK = 0xffffffffffL;

  private static final String CONTAINER_PREFIX = "container";
  private static final String EPOCH_PREFIX = "e";

  private long containerId = 0;

  private ApplicationAttemptId applicationAttemptId;

  private ContainerId(ApplicationAttemptId applicationAttemptId, long containerId) {
    this.applicationAttemptId = applicationAttemptId;
    this.containerId = containerId;
  }

  public static ContainerId newContainerId(ApplicationAttemptId appAttemptId, long containerId) {
    return new ContainerId(appAttemptId, containerId);
  }

  public ApplicationAttemptId getApplicationAttemptId() {
    return applicationAttemptId;
  }

  public long getContainerId() {
    return containerId;
  }

  // TODO: fail the app submission if attempts are more than 10 or something
  private static final ThreadLocal<NumberFormat> appAttemptIdAndEpochFormat =
      new ThreadLocal<NumberFormat>() {
        @Override
        public NumberFormat initialValue() {
          NumberFormat fmt = NumberFormat.getInstance();
          fmt.setGroupingUsed(false);
          fmt.setMinimumIntegerDigits(2);
          return fmt;
        }
      };
  // TODO: Why thread local?
  // ^ NumberFormat instances are not threadsafe
  private static final ThreadLocal<NumberFormat> containerIdFormat =
      new ThreadLocal<NumberFormat>() {
        @Override
        public NumberFormat initialValue() {
          NumberFormat fmt = NumberFormat.getInstance();
          fmt.setGroupingUsed(false);
          fmt.setMinimumIntegerDigits(6);
          return fmt;
        }
      };

  @Override
  public int hashCode() {
    // Generated by IntelliJ IDEA 13.1.
    int result = (int) (getContainerId() ^ (getContainerId() >>> 32));
    result = 31 * result + getApplicationAttemptId().hashCode();
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass() != obj.getClass()) return false;
    ContainerId other = (ContainerId) obj;
    if (!this.getApplicationAttemptId().equals(other.getApplicationAttemptId())) return false;
    if (this.getContainerId() != other.getContainerId()) return false;
    return true;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(CONTAINER_PREFIX + "_");
    long epoch = getContainerId() >> 40;
    if (epoch > 0) {
      sb.append(EPOCH_PREFIX).append(appAttemptIdAndEpochFormat.get().format(epoch)).append("_");
      ;
    }
    ApplicationId appId = applicationAttemptId.getApplicationId();
    sb.append(appId.getClusterTimestamp()).append("_");
    sb.append(ApplicationId.appIdFormat.get().format(appId.getId())).append("_");
    sb.append(appAttemptIdAndEpochFormat.get().format(getApplicationAttemptId().getAttemptId()))
        .append("_");
    sb.append(containerIdFormat.get().format(CONTAINER_ID_BITMASK & getContainerId()));
    return sb.toString();
  }

  public static ContainerId fromString(String containerIdStr) {
    Iterator<String> it = Arrays.asList(containerIdStr.split("_")).iterator();
    if (!it.next().equals(CONTAINER_PREFIX)) {
      throw new IllegalArgumentException("Invalid ContainerId prefix: " + containerIdStr);
    }
    try {
      String epochOrClusterTimestampStr = it.next();
      long epoch = 0;
      ApplicationAttemptId appAttemptID = null;
      if (epochOrClusterTimestampStr.startsWith(EPOCH_PREFIX)) {
        String epochStr = epochOrClusterTimestampStr;
        epoch = Integer.parseInt(epochStr.substring(EPOCH_PREFIX.length()));
        appAttemptID = toApplicationAttemptId(it);
      } else {
        String clusterTimestampStr = epochOrClusterTimestampStr;
        long clusterTimestamp = Long.parseLong(clusterTimestampStr);
        appAttemptID = toApplicationAttemptId(clusterTimestamp, it);
      }
      long id = Long.parseLong(it.next());
      long cid = (epoch << 40) | id;
      ContainerId containerId = ContainerId.newContainerId(appAttemptID, cid);
      return containerId;
    } catch (NumberFormatException n) {
      throw new IllegalArgumentException("Invalid ContainerId: " + containerIdStr, n);
    }
  }

  private static ApplicationAttemptId toApplicationAttemptId(Iterator<String> it)
      throws NumberFormatException {
    return toApplicationAttemptId(Long.parseLong(it.next()), it);
  }

  private static ApplicationAttemptId toApplicationAttemptId(
      long clusterTimestamp, Iterator<String> it) throws NumberFormatException {
    ApplicationId appId = ApplicationId.newInstance(clusterTimestamp, Integer.parseInt(it.next()));
    ApplicationAttemptId appAttemptId =
        ApplicationAttemptId.newInstance(appId, Integer.parseInt(it.next()));
    return appAttemptId;
  }
}
